#############################################
#          Execution Configuration          #
#############################################
execution {
    # Entity name as defined in the dataset configuration
    entity = "movies"

    # Data ingest: pick one of these two options
    dataIngestFromJSON {
        enabled = "false"
        # Saves ingested data RDD to object files
        # in the future,
        saveIngestedRDD = "true"
    }

    # Ingests data from RDD files
    dataIngestFromRDD  = "true"
}



###########################################
#          Dataset Configuration          #
###########################################
data {
    basePath = "data/"
    outputPath = "output/"
    writeRDDToFile = "true"
    # Relative to basepath
    writeRDDPath = "cache/ingest/"

    csvSerializer {
        isInputEscaped = "false"
        quoteAllFields = "true"
    }

    # These entries correspond to entities
    # Each entity should define a path and metaPath
    books {
        path = "unprocessed/Books.json"
        metaPath = "unprocessed/meta_Books.json"
    }
    movies {
        path = "unprocessed/Movies_and_TV.json"
        metaPath = "unprocessed/meta_Movies_and_TV.json"
    }

    dataCleaner {
        # Filters to apply to the reviews
        # If these filters match, the review is discarded
        filterReviews {
            ifReviewTextIsNull = "true"
            # Reviews not in this range are discarded
            minYear = "2011"
            maxYear = "2013"
        }

        # Filters to apply to review data
        # Reviews will be cleaned to meet this criteria
        cleanMeta {
            removeParenthesisInTitle = "true"
            # Generally, if the length of a product title is longer than 100 it's too much information to be useful
            # set to -1 to disable
            length = "100"

            # Executes regexes against the text
            # regex matches are erased from source text
            # NOTE: regexes need backslashes to be escaped as double backslashes.
            regexClear = [
                # Lots of VHS things for some reason
                "VHS",
                # Lots of products with extra data in brackets ex: "(2 for 1)"
                "\\((.*?)\\)",
                # Same thing with square brackets
                "\\[(.*?)\\]"
                # &amp for HTML formatting can be stripped
                "&amp"
            ]
        }
    }
}



#########################################
#          Spark Configuration          #
#########################################
spark {
    master="local"
    parser {
        filePartitions=8
    }

    # https://spark.apache.org/docs/latest/configuration.html#memory-management
    # key/values are injected into spark configuration
    conf = [
        {
            key="spark.sql.legacy.setCommandRejectsSparkCoreConfs"
            value="false"
        },
        {
            key="spark.memory.offHeap.enabled"
            value="true"
        },
        {
            key="spark.memory.offHeap.size"
            value="64G"
        },
        {
            key="spark.sql.datetime.java8API.enabled"
            value="true"
        }
    ]
}